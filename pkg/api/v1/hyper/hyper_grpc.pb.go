// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hyper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HyperServiceClient is the client API for HyperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HyperServiceClient interface {
	Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Power(ctx context.Context, in *PowerRequest, opts ...grpc.CallOption) (*PowerResponse, error)
}

type hyperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHyperServiceClient(cc grpc.ClientConnInterface) HyperServiceClient {
	return &hyperServiceClient{cc}
}

func (c *hyperServiceClient) Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/vpc.hyper.HyperService/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/vpc.hyper.HyperService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperServiceClient) Power(ctx context.Context, in *PowerRequest, opts ...grpc.CallOption) (*PowerResponse, error) {
	out := new(PowerResponse)
	err := c.cc.Invoke(ctx, "/vpc.hyper.HyperService/Power", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HyperServiceServer is the server API for HyperService service.
// All implementations must embed UnimplementedHyperServiceServer
// for forward compatibility
type HyperServiceServer interface {
	Stats(context.Context, *StatsRequest) (*StatsResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Power(context.Context, *PowerRequest) (*PowerResponse, error)
	mustEmbedUnimplementedHyperServiceServer()
}

// UnimplementedHyperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHyperServiceServer struct {
}

func (*UnimplementedHyperServiceServer) Stats(context.Context, *StatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (*UnimplementedHyperServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedHyperServiceServer) Power(context.Context, *PowerRequest) (*PowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Power not implemented")
}
func (*UnimplementedHyperServiceServer) mustEmbedUnimplementedHyperServiceServer() {}

func RegisterHyperServiceServer(s *grpc.Server, srv HyperServiceServer) {
	s.RegisterService(&_HyperService_serviceDesc, srv)
}

func _HyperService_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServiceServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.hyper.HyperService/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServiceServer).Stats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.hyper.HyperService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperService_Power_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServiceServer).Power(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.hyper.HyperService/Power",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServiceServer).Power(ctx, req.(*PowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HyperService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vpc.hyper.HyperService",
	HandlerType: (*HyperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stats",
			Handler:    _HyperService_Stats_Handler,
		},
		{
			MethodName: "List",
			Handler:    _HyperService_List_Handler,
		},
		{
			MethodName: "Power",
			Handler:    _HyperService_Power_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyper.proto",
}

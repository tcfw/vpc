// Code generated by protoc-gen-go. DO NOT EDIT.
// source: l2Controller.proto

package l2Controller

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LookupType int32

const (
	LookupType_MAC LookupType = 0
	LookupType_IP  LookupType = 1
)

var LookupType_name = map[int32]string{
	0: "MAC",
	1: "IP",
}

var LookupType_value = map[string]int32{
	"MAC": 0,
	"IP":  1,
}

func (x LookupType) String() string {
	return proto.EnumName(LookupType_name, int32(x))
}

func (LookupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_14118794078d2a8b, []int{0}
}

type MACIPRequest struct {
	VNID                 uint32   `protobuf:"varint,1,opt,name=VNID,proto3" json:"VNID,omitempty"`
	VLAN                 uint32   `protobuf:"varint,2,opt,name=VLAN,proto3" json:"VLAN,omitempty"`
	MAC                  string   `protobuf:"bytes,3,opt,name=MAC,proto3" json:"MAC,omitempty"`
	IP                   string   `protobuf:"bytes,4,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACIPRequest) Reset()         { *m = MACIPRequest{} }
func (m *MACIPRequest) String() string { return proto.CompactTextString(m) }
func (*MACIPRequest) ProtoMessage()    {}
func (*MACIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_14118794078d2a8b, []int{0}
}

func (m *MACIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MACIPRequest.Unmarshal(m, b)
}
func (m *MACIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MACIPRequest.Marshal(b, m, deterministic)
}
func (m *MACIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACIPRequest.Merge(m, src)
}
func (m *MACIPRequest) XXX_Size() int {
	return xxx_messageInfo_MACIPRequest.Size(m)
}
func (m *MACIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MACIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MACIPRequest proto.InternalMessageInfo

func (m *MACIPRequest) GetVNID() uint32 {
	if m != nil {
		return m.VNID
	}
	return 0
}

func (m *MACIPRequest) GetVLAN() uint32 {
	if m != nil {
		return m.VLAN
	}
	return 0
}

func (m *MACIPRequest) GetMAC() string {
	if m != nil {
		return m.MAC
	}
	return ""
}

func (m *MACIPRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type MACIPResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACIPResp) Reset()         { *m = MACIPResp{} }
func (m *MACIPResp) String() string { return proto.CompactTextString(m) }
func (*MACIPResp) ProtoMessage()    {}
func (*MACIPResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_14118794078d2a8b, []int{1}
}

func (m *MACIPResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MACIPResp.Unmarshal(m, b)
}
func (m *MACIPResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MACIPResp.Marshal(b, m, deterministic)
}
func (m *MACIPResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACIPResp.Merge(m, src)
}
func (m *MACIPResp) XXX_Size() int {
	return xxx_messageInfo_MACIPResp.Size(m)
}
func (m *MACIPResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MACIPResp.DiscardUnknown(m)
}

var xxx_messageInfo_MACIPResp proto.InternalMessageInfo

type LookupRequest struct {
	LookupType           LookupType `protobuf:"varint,1,opt,name=LookupType,proto3,enum=vpc.l2Controller.LookupType" json:"LookupType,omitempty"`
	VNID                 uint32     `protobuf:"varint,2,opt,name=VNID,proto3" json:"VNID,omitempty"`
	VLAN                 uint32     `protobuf:"varint,3,opt,name=VLAN,proto3" json:"VLAN,omitempty"`
	MAC                  string     `protobuf:"bytes,4,opt,name=MAC,proto3" json:"MAC,omitempty"`
	IP                   string     `protobuf:"bytes,5,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LookupRequest) Reset()         { *m = LookupRequest{} }
func (m *LookupRequest) String() string { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()    {}
func (*LookupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_14118794078d2a8b, []int{2}
}

func (m *LookupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupRequest.Unmarshal(m, b)
}
func (m *LookupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupRequest.Marshal(b, m, deterministic)
}
func (m *LookupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupRequest.Merge(m, src)
}
func (m *LookupRequest) XXX_Size() int {
	return xxx_messageInfo_LookupRequest.Size(m)
}
func (m *LookupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupRequest proto.InternalMessageInfo

func (m *LookupRequest) GetLookupType() LookupType {
	if m != nil {
		return m.LookupType
	}
	return LookupType_MAC
}

func (m *LookupRequest) GetVNID() uint32 {
	if m != nil {
		return m.VNID
	}
	return 0
}

func (m *LookupRequest) GetVLAN() uint32 {
	if m != nil {
		return m.VLAN
	}
	return 0
}

func (m *LookupRequest) GetMAC() string {
	if m != nil {
		return m.MAC
	}
	return ""
}

func (m *LookupRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type LookupResponse struct {
	MAC                  string   `protobuf:"bytes,1,opt,name=MAC,proto3" json:"MAC,omitempty"`
	IP                   string   `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupResponse) Reset()         { *m = LookupResponse{} }
func (m *LookupResponse) String() string { return proto.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()    {}
func (*LookupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_14118794078d2a8b, []int{3}
}

func (m *LookupResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupResponse.Unmarshal(m, b)
}
func (m *LookupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupResponse.Marshal(b, m, deterministic)
}
func (m *LookupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupResponse.Merge(m, src)
}
func (m *LookupResponse) XXX_Size() int {
	return xxx_messageInfo_LookupResponse.Size(m)
}
func (m *LookupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LookupResponse proto.InternalMessageInfo

func (m *LookupResponse) GetMAC() string {
	if m != nil {
		return m.MAC
	}
	return ""
}

func (m *LookupResponse) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type VNIDRequest struct {
	VNID                 uint32   `protobuf:"varint,1,opt,name=VNID,proto3" json:"VNID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VNIDRequest) Reset()         { *m = VNIDRequest{} }
func (m *VNIDRequest) String() string { return proto.CompactTextString(m) }
func (*VNIDRequest) ProtoMessage()    {}
func (*VNIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_14118794078d2a8b, []int{4}
}

func (m *VNIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VNIDRequest.Unmarshal(m, b)
}
func (m *VNIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VNIDRequest.Marshal(b, m, deterministic)
}
func (m *VNIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VNIDRequest.Merge(m, src)
}
func (m *VNIDRequest) XXX_Size() int {
	return xxx_messageInfo_VNIDRequest.Size(m)
}
func (m *VNIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VNIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VNIDRequest proto.InternalMessageInfo

func (m *VNIDRequest) GetVNID() uint32 {
	if m != nil {
		return m.VNID
	}
	return 0
}

type RegResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegResponse) Reset()         { *m = RegResponse{} }
func (m *RegResponse) String() string { return proto.CompactTextString(m) }
func (*RegResponse) ProtoMessage()    {}
func (*RegResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_14118794078d2a8b, []int{5}
}

func (m *RegResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegResponse.Unmarshal(m, b)
}
func (m *RegResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegResponse.Marshal(b, m, deterministic)
}
func (m *RegResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegResponse.Merge(m, src)
}
func (m *RegResponse) XXX_Size() int {
	return xxx_messageInfo_RegResponse.Size(m)
}
func (m *RegResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegResponse proto.InternalMessageInfo

type BroadcastEndpointResponse struct {
	IP                   []string `protobuf:"bytes,1,rep,name=IP,proto3" json:"IP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BroadcastEndpointResponse) Reset()         { *m = BroadcastEndpointResponse{} }
func (m *BroadcastEndpointResponse) String() string { return proto.CompactTextString(m) }
func (*BroadcastEndpointResponse) ProtoMessage()    {}
func (*BroadcastEndpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_14118794078d2a8b, []int{6}
}

func (m *BroadcastEndpointResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BroadcastEndpointResponse.Unmarshal(m, b)
}
func (m *BroadcastEndpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BroadcastEndpointResponse.Marshal(b, m, deterministic)
}
func (m *BroadcastEndpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastEndpointResponse.Merge(m, src)
}
func (m *BroadcastEndpointResponse) XXX_Size() int {
	return xxx_messageInfo_BroadcastEndpointResponse.Size(m)
}
func (m *BroadcastEndpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastEndpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastEndpointResponse proto.InternalMessageInfo

func (m *BroadcastEndpointResponse) GetIP() []string {
	if m != nil {
		return m.IP
	}
	return nil
}

func init() {
	proto.RegisterEnum("vpc.l2Controller.LookupType", LookupType_name, LookupType_value)
	proto.RegisterType((*MACIPRequest)(nil), "vpc.l2Controller.MACIPRequest")
	proto.RegisterType((*MACIPResp)(nil), "vpc.l2Controller.MACIPResp")
	proto.RegisterType((*LookupRequest)(nil), "vpc.l2Controller.LookupRequest")
	proto.RegisterType((*LookupResponse)(nil), "vpc.l2Controller.LookupResponse")
	proto.RegisterType((*VNIDRequest)(nil), "vpc.l2Controller.VNIDRequest")
	proto.RegisterType((*RegResponse)(nil), "vpc.l2Controller.RegResponse")
	proto.RegisterType((*BroadcastEndpointResponse)(nil), "vpc.l2Controller.BroadcastEndpointResponse")
}

func init() { proto.RegisterFile("l2Controller.proto", fileDescriptor_14118794078d2a8b) }

var fileDescriptor_14118794078d2a8b = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0xaf, 0x93, 0x50,
	0x10, 0xe5, 0xcb, 0xa7, 0x9d, 0x16, 0xc4, 0x59, 0xe1, 0xd3, 0xa7, 0xc8, 0xaa, 0xb1, 0x09, 0x0b,
	0xdc, 0xba, 0xa1, 0x1f, 0x0b, 0x12, 0x40, 0x82, 0xc6, 0x18, 0x77, 0x94, 0xde, 0x34, 0x8d, 0x0d,
	0xf7, 0xca, 0xa5, 0x4d, 0xfc, 0x25, 0xfe, 0x37, 0x7f, 0x8d, 0x01, 0x0a, 0x25, 0xa5, 0xe8, 0xe2,
	0x75, 0x37, 0x39, 0x33, 0x73, 0xe6, 0x70, 0x0e, 0xb9, 0x80, 0x7b, 0x67, 0x41, 0xb3, 0x22, 0xa7,
	0xfb, 0x3d, 0xc9, 0x6d, 0x96, 0xd3, 0x82, 0xa2, 0x7e, 0x64, 0xa9, 0xdd, 0xc5, 0xad, 0x6f, 0x30,
	0x09, 0xdc, 0x85, 0x17, 0xc5, 0xe4, 0xe7, 0x81, 0xf0, 0x02, 0x11, 0x94, 0xaf, 0xa1, 0xb7, 0x34,
	0x44, 0x53, 0x9c, 0xaa, 0x71, 0x55, 0x57, 0x98, 0xef, 0x86, 0x86, 0x74, 0xc2, 0x7c, 0x37, 0x44,
	0x1d, 0xe4, 0xc0, 0x5d, 0x18, 0xb2, 0x29, 0x4e, 0x47, 0x71, 0x59, 0xa2, 0x06, 0x92, 0x17, 0x19,
	0x4a, 0x05, 0x48, 0x5e, 0x64, 0x8d, 0x61, 0x74, 0x62, 0xe6, 0xcc, 0xfa, 0x2d, 0x82, 0xea, 0x53,
	0xfa, 0xe3, 0xc0, 0x9a, 0x43, 0x1f, 0x01, 0x6a, 0xe0, 0xcb, 0x2f, 0x46, 0xaa, 0x73, 0x9a, 0xf3,
	0xda, 0xbe, 0xd4, 0x67, 0x9f, 0x67, 0xe2, 0xce, 0x7c, 0x2b, 0x53, 0xba, 0x22, 0x53, 0xee, 0xcb,
	0x54, 0x2e, 0x65, 0x3e, 0x69, 0x65, 0x3a, 0xa0, 0x35, 0xc2, 0x38, 0xa3, 0x19, 0x27, 0xcd, 0x8e,
	0x78, 0xb9, 0x23, 0xb5, 0x3b, 0xef, 0x60, 0x5c, 0x5e, 0xfc, 0x87, 0x67, 0x96, 0x0a, 0xe3, 0x98,
	0x6c, 0x1b, 0x4e, 0x6b, 0x06, 0x2f, 0xe7, 0x39, 0x4d, 0x36, 0x69, 0xc2, 0x8b, 0x55, 0xb6, 0x61,
	0x74, 0x97, 0x15, 0xed, 0xc1, 0x9a, 0x5e, 0x34, 0xe5, 0x9a, 0xfe, 0xfd, 0x43, 0xd7, 0x1a, 0x7c,
	0x5a, 0xc9, 0xd1, 0x05, 0xbc, 0x2b, 0xc7, 0x74, 0xd1, 0xf9, 0xa3, 0xc0, 0x8b, 0xb3, 0x43, 0x9f,
	0x49, 0x7e, 0xdc, 0xa5, 0x04, 0x43, 0x50, 0x63, 0xb2, 0xdd, 0xf1, 0x82, 0xe4, 0x41, 0x92, 0x7a,
	0x11, 0xbe, 0xe9, 0x9b, 0xd9, 0x4d, 0xfa, 0xfe, 0xd5, 0x60, 0x9f, 0x33, 0x4b, 0xc0, 0x08, 0x9e,
	0x2f, 0x49, 0x7e, 0x4b, 0xc6, 0x4f, 0xf0, 0xac, 0xfe, 0x2c, 0x2f, 0xc2, 0xb7, 0x43, 0x49, 0x37,
	0x5c, 0xe6, 0xf0, 0xc0, 0xc9, 0xd2, 0x52, 0xe2, 0xa8, 0xc6, 0x82, 0x24, 0xbd, 0x0d, 0xe3, 0x1a,
	0xb0, 0x17, 0x13, 0xc7, 0x87, 0xfe, 0x66, 0x27, 0xfe, 0xfb, 0x59, 0xbf, 0x3d, 0x98, 0xb5, 0x25,
	0xa0, 0x0f, 0xd0, 0x04, 0xb5, 0x8a, 0xfe, 0xc7, 0x7d, 0xa5, 0xdd, 0xfd, 0xad, 0x04, 0x0c, 0x61,
	0x72, 0x8e, 0xe9, 0xf1, 0x7c, 0x73, 0xed, 0xfb, 0xa4, 0xdb, 0x5d, 0xdf, 0x55, 0x0f, 0xc7, 0x87,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xff, 0x28, 0x4e, 0x4e, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerServiceClient interface {
	RegisterMacIP(ctx context.Context, in *MACIPRequest, opts ...grpc.CallOption) (*MACIPResp, error)
	DeregisterMacIP(ctx context.Context, in *MACIPRequest, opts ...grpc.CallOption) (*MACIPResp, error)
	LookupIP(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	LookupMac(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	BroadcastEndpoints(ctx context.Context, in *VNIDRequest, opts ...grpc.CallOption) (*BroadcastEndpointResponse, error)
	RegisterEP(ctx context.Context, in *VNIDRequest, opts ...grpc.CallOption) (*RegResponse, error)
	DeregisterEP(ctx context.Context, in *VNIDRequest, opts ...grpc.CallOption) (*RegResponse, error)
}

type controllerServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerServiceClient(cc *grpc.ClientConn) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) RegisterMacIP(ctx context.Context, in *MACIPRequest, opts ...grpc.CallOption) (*MACIPResp, error) {
	out := new(MACIPResp)
	err := c.cc.Invoke(ctx, "/vpc.l2Controller.ControllerService/RegisterMacIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeregisterMacIP(ctx context.Context, in *MACIPRequest, opts ...grpc.CallOption) (*MACIPResp, error) {
	out := new(MACIPResp)
	err := c.cc.Invoke(ctx, "/vpc.l2Controller.ControllerService/DeregisterMacIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) LookupIP(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/vpc.l2Controller.ControllerService/LookupIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) LookupMac(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/vpc.l2Controller.ControllerService/LookupMac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) BroadcastEndpoints(ctx context.Context, in *VNIDRequest, opts ...grpc.CallOption) (*BroadcastEndpointResponse, error) {
	out := new(BroadcastEndpointResponse)
	err := c.cc.Invoke(ctx, "/vpc.l2Controller.ControllerService/BroadcastEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) RegisterEP(ctx context.Context, in *VNIDRequest, opts ...grpc.CallOption) (*RegResponse, error) {
	out := new(RegResponse)
	err := c.cc.Invoke(ctx, "/vpc.l2Controller.ControllerService/RegisterEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeregisterEP(ctx context.Context, in *VNIDRequest, opts ...grpc.CallOption) (*RegResponse, error) {
	out := new(RegResponse)
	err := c.cc.Invoke(ctx, "/vpc.l2Controller.ControllerService/DeregisterEP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServiceServer is the server API for ControllerService service.
type ControllerServiceServer interface {
	RegisterMacIP(context.Context, *MACIPRequest) (*MACIPResp, error)
	DeregisterMacIP(context.Context, *MACIPRequest) (*MACIPResp, error)
	LookupIP(context.Context, *LookupRequest) (*LookupResponse, error)
	LookupMac(context.Context, *LookupRequest) (*LookupResponse, error)
	BroadcastEndpoints(context.Context, *VNIDRequest) (*BroadcastEndpointResponse, error)
	RegisterEP(context.Context, *VNIDRequest) (*RegResponse, error)
	DeregisterEP(context.Context, *VNIDRequest) (*RegResponse, error)
}

// UnimplementedControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServiceServer struct {
}

func (*UnimplementedControllerServiceServer) RegisterMacIP(ctx context.Context, req *MACIPRequest) (*MACIPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMacIP not implemented")
}
func (*UnimplementedControllerServiceServer) DeregisterMacIP(ctx context.Context, req *MACIPRequest) (*MACIPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterMacIP not implemented")
}
func (*UnimplementedControllerServiceServer) LookupIP(ctx context.Context, req *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupIP not implemented")
}
func (*UnimplementedControllerServiceServer) LookupMac(ctx context.Context, req *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupMac not implemented")
}
func (*UnimplementedControllerServiceServer) BroadcastEndpoints(ctx context.Context, req *VNIDRequest) (*BroadcastEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastEndpoints not implemented")
}
func (*UnimplementedControllerServiceServer) RegisterEP(ctx context.Context, req *VNIDRequest) (*RegResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEP not implemented")
}
func (*UnimplementedControllerServiceServer) DeregisterEP(ctx context.Context, req *VNIDRequest) (*RegResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterEP not implemented")
}

func RegisterControllerServiceServer(s *grpc.Server, srv ControllerServiceServer) {
	s.RegisterService(&_ControllerService_serviceDesc, srv)
}

func _ControllerService_RegisterMacIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MACIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).RegisterMacIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.l2Controller.ControllerService/RegisterMacIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).RegisterMacIP(ctx, req.(*MACIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeregisterMacIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MACIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeregisterMacIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.l2Controller.ControllerService/DeregisterMacIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeregisterMacIP(ctx, req.(*MACIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_LookupIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).LookupIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.l2Controller.ControllerService/LookupIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).LookupIP(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_LookupMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).LookupMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.l2Controller.ControllerService/LookupMac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).LookupMac(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_BroadcastEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VNIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).BroadcastEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.l2Controller.ControllerService/BroadcastEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).BroadcastEndpoints(ctx, req.(*VNIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_RegisterEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VNIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).RegisterEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.l2Controller.ControllerService/RegisterEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).RegisterEP(ctx, req.(*VNIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeregisterEP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VNIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeregisterEP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.l2Controller.ControllerService/DeregisterEP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeregisterEP(ctx, req.(*VNIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vpc.l2Controller.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMacIP",
			Handler:    _ControllerService_RegisterMacIP_Handler,
		},
		{
			MethodName: "DeregisterMacIP",
			Handler:    _ControllerService_DeregisterMacIP_Handler,
		},
		{
			MethodName: "LookupIP",
			Handler:    _ControllerService_LookupIP_Handler,
		},
		{
			MethodName: "LookupMac",
			Handler:    _ControllerService_LookupMac_Handler,
		},
		{
			MethodName: "BroadcastEndpoints",
			Handler:    _ControllerService_BroadcastEndpoints_Handler,
		},
		{
			MethodName: "RegisterEP",
			Handler:    _ControllerService_RegisterEP_Handler,
		},
		{
			MethodName: "DeregisterEP",
			Handler:    _ControllerService_DeregisterEP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "l2Controller.proto",
}

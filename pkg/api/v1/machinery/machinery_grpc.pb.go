// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package machinery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MachineryServiceClient is the client API for MachineryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineryServiceClient interface {
	Ping(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*PingResponse, error)
	Placements(ctx context.Context, in *PlacementsRequest, opts ...grpc.CallOption) (*PlacementsResponse, error)
	Machines(ctx context.Context, in *MachinesRequest, opts ...grpc.CallOption) (*MachinesResponse, error)
	Place(ctx context.Context, in *PlaceRequest, opts ...grpc.CallOption) (*PlaceResponse, error)
}

type machineryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineryServiceClient(cc grpc.ClientConnInterface) MachineryServiceClient {
	return &machineryServiceClient{cc}
}

func (c *machineryServiceClient) Ping(ctx context.Context, in *Machine, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/vpc.machinery.MachineryService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineryServiceClient) Placements(ctx context.Context, in *PlacementsRequest, opts ...grpc.CallOption) (*PlacementsResponse, error) {
	out := new(PlacementsResponse)
	err := c.cc.Invoke(ctx, "/vpc.machinery.MachineryService/Placements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineryServiceClient) Machines(ctx context.Context, in *MachinesRequest, opts ...grpc.CallOption) (*MachinesResponse, error) {
	out := new(MachinesResponse)
	err := c.cc.Invoke(ctx, "/vpc.machinery.MachineryService/Machines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineryServiceClient) Place(ctx context.Context, in *PlaceRequest, opts ...grpc.CallOption) (*PlaceResponse, error) {
	out := new(PlaceResponse)
	err := c.cc.Invoke(ctx, "/vpc.machinery.MachineryService/Place", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineryServiceServer is the server API for MachineryService service.
// All implementations must embed UnimplementedMachineryServiceServer
// for forward compatibility
type MachineryServiceServer interface {
	Ping(context.Context, *Machine) (*PingResponse, error)
	Placements(context.Context, *PlacementsRequest) (*PlacementsResponse, error)
	Machines(context.Context, *MachinesRequest) (*MachinesResponse, error)
	Place(context.Context, *PlaceRequest) (*PlaceResponse, error)
	mustEmbedUnimplementedMachineryServiceServer()
}

// UnimplementedMachineryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMachineryServiceServer struct {
}

func (*UnimplementedMachineryServiceServer) Ping(context.Context, *Machine) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedMachineryServiceServer) Placements(context.Context, *PlacementsRequest) (*PlacementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Placements not implemented")
}
func (*UnimplementedMachineryServiceServer) Machines(context.Context, *MachinesRequest) (*MachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Machines not implemented")
}
func (*UnimplementedMachineryServiceServer) Place(context.Context, *PlaceRequest) (*PlaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Place not implemented")
}
func (*UnimplementedMachineryServiceServer) mustEmbedUnimplementedMachineryServiceServer() {}

func RegisterMachineryServiceServer(s *grpc.Server, srv MachineryServiceServer) {
	s.RegisterService(&_MachineryService_serviceDesc, srv)
}

func _MachineryService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Machine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineryServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.machinery.MachineryService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineryServiceServer).Ping(ctx, req.(*Machine))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineryService_Placements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlacementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineryServiceServer).Placements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.machinery.MachineryService/Placements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineryServiceServer).Placements(ctx, req.(*PlacementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineryService_Machines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineryServiceServer).Machines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.machinery.MachineryService/Machines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineryServiceServer).Machines(ctx, req.(*MachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineryService_Place_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineryServiceServer).Place(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vpc.machinery.MachineryService/Place",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineryServiceServer).Place(ctx, req.(*PlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MachineryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vpc.machinery.MachineryService",
	HandlerType: (*MachineryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MachineryService_Ping_Handler,
		},
		{
			MethodName: "Placements",
			Handler:    _MachineryService_Placements_Handler,
		},
		{
			MethodName: "Machines",
			Handler:    _MachineryService_Machines_Handler,
		},
		{
			MethodName: "Place",
			Handler:    _MachineryService_Place_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "machinery.proto",
}
